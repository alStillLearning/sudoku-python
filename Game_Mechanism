import numpy as np
import random

myArray = np.array([
    [3,5,7,1,2,3,4,5,2],
    [1,2,3,2,4,1,2,3,4],
    [7,8,2,3,4,5,6,7,9],
    [4,3,1,2,1,6,7,8,4],
    [1,2,3,4,5,6,7,8,9],
    [2,1,3,4,5,6,7,8,9],
    [3,1,2,4,5,6,7,8,9],
    [4,1,2,3,5,6,7,8,9],
    [5,1,2,3,4,6,7,8,9]
], dtype=np.int8)

#Randomizer Start

#Fill left-bottom and right-top grid with random permutation of 1-9
def randomPermutationNum(number):
    array=list(range(1,number+1))
    permutated = []
    for i in range(0,len(array)):
        index = random.randint(0,len(array)-1)
        permutated = permutated + [array[index]]
        array.pop(index)
    return permutated

# def fillGrid(arr):
    # for i in range(1,3):

#Randomizer Ends

#Given a 2-dimensional array "arr" an an integer "n", return the nth Column as a one-dimensional numpy array
def nColumn(arr,n):
    columnArray=np.array([],dtype=np.int8)
    for i in range(arr.shape[0]):
        columnArray = np.append(columnArray,arr[i][n])
    return columnArray
    
#Given a 2-dimensional array "arr" and an integer "n", return the nth Row as a one-dimensional numpy array
def nRow(arr,n):
    rowArray=np.array([],dtype=np.int8)
    for i in range(arr.shape[1]):
        rowArray = np.append(rowArray,arr[n][i])
    return rowArray
    
#Given an array and integer n, get the nth-Row -> Divide the nRow without changing the element where each part consist of
#3 elements and return A part according to the "part" input NOTE: The columnn of the array must be a multiple of 3
def partitionRow(arr, n, part):
    partitionedRow=np.array([], dtype=np.int8)
    rowArray=nRow(arr,n)
    partEnd = part*3
    partStart = partEnd - 3
    for i in range(partStart, partEnd):
        partitionedRow = np.append(partitionedRow, rowArray[i])
    return partitionedRow
    
#Given an array and (x,y) coordinate, return the 3*3 grids corresponding to the coordinate
def xyGrids(arr,x_axis,y_axis):
    gridsArray = np.array([], dtype=np.int8)
    y_end = y_axis*3
    y_start = y_end - 3
    for i in range(y_start,y_end):
        tempList=partitionRow(arr,i,x_axis)
        gridsArray=np.append(gridsArray, tempList)
    return gridsArray
        
def noSameElement(arr):
    for i in range(len(arr)):
        for j in range(len(arr)):
            if j == i:
                pass
            elif arr[i] == arr[j]:
                return False
            else: pass
    return True
    
def rowsAllGood(arr):
    for i in range(arr.shape[0]):
        tempList=nRow(arr,i)
        if noSameElement(tempList):
            pass
        else:
            return False
    return True
    
def columnsAllGood(arr):
    for i in range(arr.shape[1]):
        tempList=nColumn(arr,i)
        if noSameElement(tempList):
            pass
        else:
            return False
    return True

def gridsAllGood(arr):
    for i in range(1,4):
        for j in range(1,4):
            tempList=xyGrids(arr, i, j)
            if noSameElement(tempList):
                pass
            else: return False
    return True

def allGood(arr):
    if columnsAllGood(arr)==rowsAllGood(arr)==gridsAllGood(arr)==True:
        return True
    else:
        return False

def rowExtender(arr, extend):                 #Make Sure The length of "to-be-extended" row match that of row of Array
    newArray=np.append(arr, [extend], axis=0)
    return newArray
    
def arrayMod(arr, Row, Column, newValue):
    arr[Row-1,Column-1]=newValue
    return arr

#Randomizer Start

def randomPermutationNum(number):
    array=list(range(1,number+1))
    permutated = []
    for i in range(0,len(array)):
        index = random.randint(0,len(array)-1)
        permutated = permutated + [array[index]]
        array.pop(index)
    return permutated

#Fill a grid with random number 1-9
def fillXYGrid(array, x_axis, y_axis):
    permutation = randomPermutationNum(9)
    y_end = y_axis*3
    y_start = y_end - 3
    x_end = x_axis*3
    x_start = x_end - 3
    y_iteration=range(y_start,y_end)
    x_iteration=range(x_start,x_end)
    k=0
    for i in x_iteration:
        for j in y_iteration:
            array[i,j]=permutation[k]
            k+=1
    return array
#Randomizer Ends
print(fillXYGrid(myArray,3,1))

# Game Mechanism
# for i in range(1000):
    # if i == 0:
        # print(myArray)
        # Row= int(input('Enter The Row:'))
        # Column=int(input('Enter The Column:'))
        # Value=int(input('Enter The Value:'))
        # tempArray= arrayMod(myArray, Row, Column, Value)
    # elif allGood(tempArray):
        # print(tempArray)
        # print("YOU HAVE SOLVED THE SUDOKU!!!")
        # break
    # else:
        # print(tempArray)
        # Row= int(input('Enter The Row:'))
        # Column=int(input('Enter The Column:'))
        # Value=int(input('Enter The Value:'))
        # tempArray= arrayMod(myArray, Row, Column, Value)